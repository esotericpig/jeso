/**
 * This file is part of jeso.
 * Copyright (c) 2019 Jonathan Bradley Whited (@esotericpig)
 * 
 * jeso is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * jeso is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with jeso. If not, see <http://www.gnu.org/licenses/>.
 */

plugins {
  id 'java-library'
  id 'com.github.spotbugs' version '2.0.0'
}

import java.util.regex.Pattern

/**
 * Properties
 */
version                 = '0.2.0'
ext.author              = 'Jonathan Bradley Whited (@esotericpig)'
ext.license             = 'LGPL-3.0-or-later'

ext.homepage            = 'https://github.com/esotericpig/jeso'
ext.summary             = 'Java utils'
description             = 'Java utils to make Java less verbose.'

group                   = "com.esotericpig.${project.name}"
sourceCompatibility     = '1.8' // Source language to interpret (*.java)
targetCompatibility     = '1.8' // Bytecode to output (*.class)

ext.charset             = 'UTF-8'
ext.encoding            = 'UTF-8'
ext.locale              = 'en_US'

ext.compilerArgs        = ['-Xlint:deprecation','-Xlint:unchecked']

// Dependencies
ext.junitJupiterVersion = '5.4.2'

// Javadoc
javadoc.title           = "${project.name} v${project.version}"

// Checksums
ext.gradlewPath         = "${projectDir}/gradle/wrapper"
ext.gradlewJarPath      = "${ext.gradlewPath}/gradle-wrapper.jar"
ext.gradlewPropPath     = "${ext.gradlewPath}/gradle-wrapper.properties"
ext.gradlewSumPath      = "${ext.gradlewJarPath}.sha256"

/**
 * Repositories and Dependencies
 */
repositories {
  jcenter()
}

dependencies {
  // External Dependencies (put on user's classpath)
  //api ':'
  
  // Internal Dependencies (not put on user's classpath)
  //implementation ':'
  
  // Test Dependencies
  testImplementation "org.junit.jupiter:junit-jupiter:${project.ext.junitJupiterVersion}"
}

spotbugs {
  toolVersion = '3.1.12'
  
  excludeFilter = file('spotbugs_exclude.xml')
}

/**
 * Tasks
 */
defaultTasks 'clean','buildRelease'

task(buildFatRelease,type: Jar,dependsOn: ['test','javadoc','classes']) {
  group       'Build'
  description 'Assembles everything necessary for a release into one "fat" jar.'
  
  // Include dependencies (jars) to final jar; a "fat jar"
  from configurations.compile.collect {
    it.isDirectory() ? it : zipTree(it)
  }
  
  classifier 'all'
  from javadoc.destinationDir
  from sourceSets.main.allSource
  from sourceSets.main.output
}

task(buildRelease,type: GradleBuild) {
  group       'Build'
  description 'Assembles everything necessary for a release: Jar, Javadoc Zip, Sources Jar, etc.'
  
  tasks = ['test','jar','javadoc','javadocZip','sourcesJar']
}

task(checkGradleW) {
  group       'Checksum'
  description "Check the SHA-256 sum of the Gradle Wrapper Jar (${project.ext.gradlewJarPath.replace("${projectDir}",'')})."
  
  doLast {
    ant.checksum(file: project.ext.gradlewJarPath,algorithm: 'SHA-256',property: 'gradlewJarSum')
    
    String gradlewJarSum = ant.properties['gradlewJarSum']
    String gradlewSumSum = new File(project.ext.gradlewSumPath).getText('UTF-8').split('\\s+')[0]
    
    String gradlewJarPath = project.ext.gradlewJarPath.replace("${projectDir}",'') + ':'
    String gradlewSumPath = project.ext.gradlewSumPath.replace("${projectDir}",'') + ':'
    
    int maxLen = -Math.max(gradlewJarPath.length(),gradlewSumPath.length())
    
    println '[Gradle Wrapper Jar Checksum]'
    printf "%${maxLen}s %s%n",gradlewJarPath,gradlewJarSum
    printf "%${maxLen}s %s%n",gradlewSumPath,gradlewSumSum
    printf "%${maxLen}s %s%n","Do they match?",gradlewJarSum.equals(gradlewSumSum) ? 'OK' : 'NOT a match!'
  }
}

compileJava {
  encoding = project.ext.encoding
  options.compilerArgs += project.ext.compilerArgs
}

compileTestJava {
  encoding = project.ext.encoding
  options.compilerArgs += project.ext.compilerArgs
}

task(wgetGradleWSums) {
  group       'Checksum'
  description 'Download the SHA-256 sums for the Gradle Wrapper Jars.'
  
  doLast{
    String checksums = new URL('https://gradle.org/release-checksums/').getText('UTF-8')
    String version = "v${project.gradle.gradleVersion}"
    
    int index = checksums.indexOf(version)
    int gradlebIndex = checksums.indexOf('Binary-only',index)
    int gradlecIndex = checksums.indexOf('Complete',index)
    int gradlewIndex = checksums.indexOf('Wrapper',index)
    
    // Split on "<code>" or "</code>"
    Pattern pattern = Pattern.compile('\\s*\\<\\s*\\/?\\s*code\\s*\\>\\s*',Pattern.CASE_INSENSITIVE)
    String gradlebSum = pattern.split(checksums.substring(gradlebIndex,gradlebIndex + 200))[1]
    String gradlecSum = pattern.split(checksums.substring(gradlecIndex,gradlecIndex + 200))[1]
    String gradlewSum = pattern.split(checksums.substring(gradlewIndex,gradlewIndex + 200))[1]
    
    println "[Gradle Checksums for ${version}]"
    println "Put this in " + project.ext.gradlewPropPath.replace("${projectDir}",'') + ':'
    println "  distributionSha256Sum=${gradlebSum}"
    println "Save this to " + project.ext.gradlewSumPath.replace("${projectDir}",'') + ':'
    println "  ${gradlewSum} ${new File(gradlewJarPath).getName()}"
    println 'Complete (-all) Zip:'
    println "  ${gradlecSum}"
  }
}

tasks.withType(Jar) {
  manifest {
    attributes(
      // Add dependencies to classpath
      'Class-Path':             configurations.compile.collect { it.getName() }.join(' '),
      
      'Specification-Title':    project.name,
      'Specification-Version':  project.version,
      'Specification-Author':   project.ext.author,
      'Specification-Vendor':   project.ext.author,
      'Specification-License':  project.ext.license,
      
      'Implementation-Title':   project.group,
      'Implementation-Version': project.version,
      'Implementation-Author':  project.ext.author,
      'Implementation-Vendor':  project.ext.author,
      'Implementation-License': project.ext.license,
      
      'Lib-Homepage':           project.ext.homepage,
      'Lib-Summary':            project.ext.summary,
      'Lib-Description':        project.description,
    )
  }
  
  from("${projectDir}/") {
    include 'LICENSE','README.md'
  }
}

javadoc {
  options {
    author      = true
    charSet     = project.ext.charset
    encoding    = project.ext.encoding
    locale      = project.ext.locale
    memberLevel = JavadocMemberLevel.PROTECTED // Show public & protected (don't show private)
    version     = true
  }
}

task(javadocZip,type: Zip,dependsOn: javadoc) {
  group       'Documentation'
  description 'Assembles a Zip archive containing the Javadoc.'
  
  classifier 'javadoc'
  from javadoc.destinationDir
}

task(sourcesJar,type: Jar,dependsOn: classes) {
  group       'Documentation'
  description 'Assembles a Jar archive containing the main source code (*.java).'
  
  classifier 'sources'
  from sourceSets.main.allSource
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
  reports.xml.enabled = false
  reports.html.enabled = true
}

test {
  useJUnitPlatform()
  
  testLogging {
    events 'passed','skipped','failed'
  }
}
