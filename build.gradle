/*
 * This file is part of Jeso.
 * Copyright (c) 2019-2022 Jonathan Bradley Whited
 *
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */

plugins {
  id 'java-library'
  id 'com.github.spotbugs'   version '6.0.+'
  id 'com.diffplug.spotless' version '6.25.+'
  id 'maven-publish'
}

repositories {
  mavenCentral()
  //maven { url 'https://jitpack.io' }
  //google()
}

group   = 'com.esotericpig.jeso' // Must be set for publishing!
version = '0.3.8'

project.ext {
  author      = 'Jonathan Bradley Whited'
  license     = 'LGPL-3.0-or-later'
  homepage    = 'https://github.com/esotericpig/jeso'
  summary     = 'Java utils'
  description = 'Java utils to make Java less verbose.'

  javaVersion  = 8
  charset      = 'UTF-8'
  encoding     = 'UTF-8'
  locale       = 'en_US'
  compilerArgs = [] //['-Xlint:deprecation','-Xlint:unchecked']

  javadoc.title = "${project.name.capitalize()} v${version}"
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

tasks.withType(JavaCompile) {
  encoding = project.encoding
  sourceCompatibility = project.javaVersion
  targetCompatibility = project.javaVersion
  compilerArgs += project.compilerArgs
}

dependencies {
  // Dependencies exported to consumers, found on their compile classpath.
  //api 'org.apache.commons:commons-math3:3.6.+'
  //api fileTree(dir: 'libs',include: ['**/*.jar'])

  // Dependencies used internally, not exposed to consumers' own compile classpath.
  //implementation 'com.google.guava:guava:30.0-jre'

  // JUnit Jupiter API for testing.
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.+'

  // JUnit Jupiter Engine for testing.
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.+'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.11.+'
}


import com.github.spotbugs.snom.SpotBugsTask

import java.util.regex.Pattern

tasks.named('test') {
  // Use JUnit platform for unit tests.
  useJUnitPlatform()

  testLogging {
    events 'passed','skipped','failed'
  }
}

spotbugs {
  excludeFilter = file('spotbugs_exclude.xml')
}

tasks.withType(SpotBugsTask) {
  reports {
    xml.enabled = false

    html {
      enabled = true
      stylesheet = 'fancy-hist.xsl'
    }
  }
}

spotless {
  encoding project.encoding

  java {
    removeUnusedImports()
    importOrder()
    indentWithSpaces()
    trimTrailingWhitespace()
    endWithNewline()
  }
}

/*========
 * Tasks *
 ========*/

defaultTasks 'clean','buildRelease','buildFatRelease'

task(buildFatRelease,type: Jar,dependsOn: ['classes','test','check','javadoc']) {
  group       'Build'
  description 'Assembles everything necessary for a release into one "fat" jar.'

  // Include dependencies (jars) to final jar; a "fat jar".
  from configurations.runtimeClasspath.collect {
    it.isDirectory() ? it : zipTree(it)
  }

  archiveClassifier = 'all'
  from javadoc.destinationDir
  from sourceSets.main.allSource
  from sourceSets.main.output
}

// Do not use "GradleBuild" because then you cannot do "-x check".
task(buildRelease,dependsOn: ['build','test','check','jar','javadoc','javadocZip','sourcesJar']) {
  group       'Build'
  description 'Assembles everything necessary for a release: Jar, Javadoc Zip, Sources Jar, etc.'
}

task(checkGradleW) {
  group       'Checksum'
  description 'Check the SHA-256 sum of the Gradle Wrapper Jar.'

  doLast {
    ant.checksum(file: "$rootDir/gradle/wrapper/gradle-wrapper.jar"
        ,algorithm: 'SHA-256',property: 'gradlewJarSum')

    String gradlewJarSum = ant.properties['gradlewJarSum']
    String gradlewSumSum = new File(
        "$rootDir/gradle/wrapper/gradle-wrapper.jar.sha256")
        .getText('UTF-8').split('\\s+')[0]

    println()
    println('[[ Gradle Wrapper Jar Checksum ]]')
    println()
    println("/gradle/wrapper/gradle-wrapper.jar         $gradlewJarSum")
    println("/gradle/wrapper/gradle-wrapper.jar.sha256  $gradlewSumSum")
    println("Do they match?                             "
        + (gradlewJarSum.equals(gradlewSumSum) ? 'OK' : 'NOT a match!'))
  }
}

task(wgetGradleWSums) {
  group       'Checksum'
  description 'Download the SHA-256 sums for the Gradle Wrapper Jars.'

  doLast {
    String checksums = new URL('https://gradle.org/release-checksums').getText('UTF-8')
    String gradleVersion = "v${project.gradle.gradleVersion}"

    int index = checksums.indexOf(gradleVersion + '<')
    int gradlebIndex = checksums.indexOf('Binary-only',index)
    int gradlecIndex = checksums.indexOf('Complete',index)
    int gradlewIndex = checksums.indexOf('Wrapper',index)

    // Split on "<code>" or "</code>".
    Pattern pattern = Pattern.compile(
        '\\s*<\\s*/?\\s*code\\s*>\\s*',Pattern.CASE_INSENSITIVE)
    String gradlebSum = pattern.split(checksums.substring(gradlebIndex,gradlebIndex + 200))[1]
    String gradlecSum = pattern.split(checksums.substring(gradlecIndex,gradlecIndex + 200))[1]
    String gradlewSum = pattern.split(checksums.substring(gradlewIndex,gradlewIndex + 200))[1]

    println()
    println("[[ Gradle Checksums for ${gradleVersion} ]]")
    println()
    println("Put this in /gradle/wrapper/gradle-wrapper.properties:")
    println("distributionSha256Sum=${gradlebSum}")
    println()
    println("Save this to /gradle/wrapper/gradle-wrapper.jar.sha256:")
    println("${gradlewSum} gradle-wrapper.jar")
    println()
    println('Complete (-all) Zip:')
    println("${gradlecSum}")
  }
}

tasks.withType(Jar) {
  manifest {
    attributes(
      // Add dependencies to classpath.
      'Class-Path': configurations.runtimeClasspath.collect {
        it.getName()
      }.join(' '),

      'Specification-Title':    project.name,
      'Specification-Version':  project.version,
      'Specification-Author':   project.author,
      'Specification-Vendor':   project.author,
      'Specification-License':  project.license,

      'Implementation-Title':   project.group,
      'Implementation-Version': project.version,
      'Implementation-Author':  project.author,
      'Implementation-Vendor':  project.author,
      'Implementation-License': project.license,

      'Lib-Homepage':           project.homepage,
      'Lib-Summary':            project.summary,
      'Lib-Description':        project.ext.description,
    )
  }

  from("${rootDir}/") {
    include 'LICENSE','README.md'
  }
}

javadoc {
  options {
    author      = true
    charSet     = project.charset
    encoding    = project.encoding
    locale      = project.locale
    memberLevel = JavadocMemberLevel.PROTECTED // Show public & protected (don't show private).
    version     = true

    // FIXME: Remove this after v1.0.0.
    addStringOption('Xdoclint:none','-quiet')
  }
}

task(javadocZip,type: Zip,dependsOn: javadoc) {
  group       'Documentation'
  description 'Assembles a Zip archive containing the Javadoc.'

  archiveClassifier = 'javadoc'
  from javadoc.destinationDir
}

task(sourcesJar,type: Jar,dependsOn: classes) {
  group       'Documentation'
  description 'Assembles a Jar archive containing the main source code (*.java).'

  archiveClassifier = 'sources'
  from sourceSets.main.allSource
}

/*=============
 * Publishing *
 =============*/

// Execute "./gradlew rsyncToGhp" for a dry run.
// Execute "./gradlew rsyncToGhp -Pdeploy=true" for actually deploying.
task(rsyncToGhp,type: Exec) {
  group       'Deploy'
  description "Rsync docs to my GitHub Page's repo; not useful for others"

  boolean isDryRun = !project.hasProperty('deploy') || !deploy

  executable 'rsync'

  args += '-ahv'
  //args += '--delete-after'
  args += '--progress'

  if(isDryRun) {
    args += '--dry-run'
  }

  args += 'build/docs/javadoc/'
  args += "../esotericpig.github.io/docs/${project.name}/javadoc"

  doLast {
    if(isDryRun) {
      println()
      println('Execute "./gradlew rsyncToGhp -Pdeploy=true" for actually deploying (non-dry-run)')
    }
  }
}

publishing {
  repositories {
    maven {
      name = 'GitHubPackages'
      url = uri("https://maven.pkg.github.com/esotericpig/${project.name}")
      credentials {
        username = System.getenv("GITHUB_ACTOR")
        password = System.getenv("GITHUB_TOKEN")
      }
    }
  }

  publications {
    gpr(MavenPublication) {
      from(components.java)
    }
  }
}
